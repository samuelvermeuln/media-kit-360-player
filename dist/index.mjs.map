{"version":3,"sources":["../src/Component/Video/RenderVideo.jsx","../src/Component/Spin360/RotateComponent.jsx","../src/Component/Spin360/animate.jsx","../src/Component/Spin360/style.jsx","../src/Component/Spin360/Icon.js"],"sourcesContent":["import React, {useRef, useState, useCallback, useEffect} from 'react';\nimport styled from 'styled-components';\n\nconst VideoContainer = styled.div`\n    position: relative;\n    width: ${({width}) => width};\n    height: ${({height}) => height};\n    padding-top: 56.25%; /* Aspect ratio (16:9) for responsive video */\n`;\n\nconst Video = styled.video`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    object-fit: cover; /* Ensure the video covers the entire container */\n`;\n\nconst Controls = styled.div`\n    position: absolute;\n    bottom: 10px;\n    left: 0;\n    width: 100%;\n    display: ${({showControls}) => (showControls ? 'flex' : 'none')};\n    align-items: center;\n    justify-content: space-between;\n    z-index: 2;\n`;\n\nconst PlayPauseButton = styled.button`\n    background: transparent;\n    border: none;\n    cursor: pointer;\n    color: white;\n    font-size: 16px;\n    opacity: 0.8; /* tornando levemente transparente */\n    width: 10%;\n`;\n\nconst ProgressBar = styled.input`\n    display: ${({showProgressBar}) => (showProgressBar ? 'block' : 'none')};\n    width: 80%;\n    margin: 0 10px;\n    opacity: 0.8; /* tornando levemente transparente */\n    accent-color: ${({progressBarColor}) => progressBarColor};\n`;\n\nconst VolumeControl = styled.input`\n    display: ${({showVolumeControl}) => (showVolumeControl ? 'block' : 'none')};\n    width: 80px;\n    margin: 0 10px;\n    opacity: 0.8; /* tornando levemente transparente */\n    accent-color: ${({volumeControlColor}) => volumeControlColor};\n`;\n\nconst RetryButton = styled.button`\n    background-color: #fff;\n    color: #000;\n    padding: 10px 20px;\n    border: 2px solid #000;\n    border-radius: 5px;\n    font-size: 16px;\n    cursor: pointer;\n`;\n\nconst LoadingErrorOverlay = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 1;\n    opacity: ${({loaded}) => (loaded ? 0 : 1)};\n    transition: opacity 0.5s ease;\n    background-image: url(${({srcFallback}) => (srcFallback)});\n    background-repeat: no-repeat;\n    background-size: cover;\n`;\n\nconst LoadingOverlay = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 1;\n    opacity: ${({loaded}) => (loaded ? 0 : 1)};\n    transition: opacity 0.5s ease;\n`;\n\n\nconst RenderVideo = React.memo(({\n    src = '',\n    autoplay = false,\n    loop = true,\n    muted = false,\n    width = '100%',\n    height = '100%',\n    showControls = true,\n    showRetryButton = true,\n    showVolumeControl = true,\n    showProgressBar = true,\n    showPlayPauseButton = true,\n    showLoadingOverlay = true,\n    RetryButtonComponent = RetryButton,\n    srcFallback = '',\n    LoadingOverlayComponent = LoadingOverlay,\n    LoadingErrorOverlayComponent = LoadingErrorOverlay,\n    TextLoadingOverlayComponent ,\n    playPauseButtonComponent: PlayPauseButtonComponent = PlayPauseButton,\n    progressBarColor = '#ffffff',\n    volumeControlColor = '#ffffff',\n}) => {\n    const videoRef = useRef(null);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [currentTime, setCurrentTime] = useState(0);\n    const [duration, setDuration] = useState(0);\n    const [volume, setVolume] = useState(0.5);\n    const [loaded, setLoaded] = useState(false);\n    const [error, setError] = useState(false);\n\n    const togglePlayPause = useCallback(() => {\n        if (videoRef.current.paused) {\n            videoRef.current.play();\n            setIsPlaying(true);\n            if (videoRef.current.muted) {\n                videoRef.current.muted = false;\n            }\n        } else {\n            videoRef.current.pause();\n            setIsPlaying(false);\n        }\n    }, []);\n\n    useEffect(() => {\n        const handleLoadedData = () => {\n            setLoaded(true);\n        };\n\n        const handleError = (event) => {\n            setError(true);\n        };\n\n        window?.addEventListener('online', () => togglePlayPause());\n        window?.addEventListener('offline', () => togglePlayPause());\n\n        if (videoRef.current) {\n            videoRef?.current?.addEventListener('loadeddata', handleLoadedData);\n            videoRef?.current?.addEventListener('error', handleError);\n            return () => {\n                videoRef?.current?.removeEventListener('loadeddata', handleLoadedData);\n                videoRef?.current?.removeEventListener('error', handleError);\n            };\n        }\n    }, []);\n\n    useEffect(() => {\n        if (autoplay) {\n            videoRef.current.muted = true;\n        }\n    }, []);\n\n    const handleTimeUpdate = useCallback(() => {\n        const {currentTime, duration} = videoRef.current;\n        setCurrentTime(currentTime);\n        setDuration(duration);\n    }, []);\n\n    const handleProgressChange = useCallback(\n        (e) => {\n            const newTime = e.target.value;\n            videoRef.current.currentTime = newTime;\n            setCurrentTime(newTime);\n        },\n        [setCurrentTime]\n    );\n\n    const handleVolumeChange = useCallback(\n        (e) => {\n            const newVolume = e.target.value;\n            videoRef.current.volume = newVolume;\n            setVolume(newVolume);\n        },\n        [setVolume]\n    );\n\n    const handleRetry = useCallback(() => {\n        videoRef.current.load();\n        setError(false);\n        setLoaded(false);\n    }, []);\n\n    return (\n        <>\n            <VideoContainer width={width} height={height}>\n                <Video\n                    ref={videoRef}\n                    src={src}\n                    controls={false}\n                    autoPlay={autoplay}\n                    loop={loop}\n                    muted={muted}\n                    volume={volume}\n                    onTimeUpdate={handleTimeUpdate}\n                    preload=\"metadata\"\n                    onClick={togglePlayPause}\n                />\n                {error && (\n                    <LoadingErrorOverlayComponent srcFallback={srcFallback} loaded={loaded}>\n                        <RetryButtonComponent\n                            showRetryButton={showRetryButton}\n                            onClick={handleRetry}\n                        >\n                            Retry\n                        </RetryButtonComponent>\n                    </LoadingErrorOverlayComponent>\n\n                )}\n                {!error && !loaded && (\n                    <LoadingOverlayComponent loaded={loaded} showLoadingOverlay={showLoadingOverlay}>\n                        {TextLoadingOverlayComponent && <TextLoadingOverlayComponent />}\n                    </LoadingOverlayComponent>\n                )}\n                <Controls showControls={showControls}>\n                    <PlayPauseButtonComponent\n                        showPlayPauseButton={showPlayPauseButton}\n                        onClick={togglePlayPause}\n                    >\n                        {isPlaying ? '||' : 'Play'}\n                    </PlayPauseButtonComponent>\n                    <ProgressBar\n                        showProgressBar={showProgressBar}\n                        type=\"range\"\n                        min={0}\n                        max={duration}\n                        value={currentTime}\n                        onChange={handleProgressChange}\n                        progressBarColor={progressBarColor}\n                    />\n                    <VolumeControl\n                        showVolumeControl={showVolumeControl}\n                        type=\"range\"\n                        min={0}\n                        max={1}\n                        step={0.1}\n                        value={volume}\n                        onChange={handleVolumeChange}\n                        volumeControlColor={volumeControlColor}\n                    />\n                </Controls>\n            </VideoContainer>\n        </>\n    );\n});\n\nexport {RenderVideo};\n","import React, {useCallback, useEffect, useRef, useState} from \"react\";\nimport {AnimationImage} from \"./animate\";\nimport {StyledDiv} from \"./style\";\n\nfunction moduloWithoutNegative(value, n) {\n    return ((value % n) + n) % n;\n}\n\nconst SpinImages360 = ({\n    imagesBaseUrl = [],\n    mouseDragSpeed = 5,\n    reverse = false,\n    autoplaySpeed = 1,\n    autoplay = true,\n    width = 400,\n    height = 300,\n    imageInitialIndex = 0,\n    shouldNotifyEvents = false,\n    notifyOnPointerDown,\n    notifyOnPointerUp,\n    notifyOnPointerMoved,\n}) => {\n    const elementRef = useRef(null);\n    const [isScrolling, setIsScrolling] = useState(false);\n    const [initialMousePosition, setInitialMousePosition] = useState(0);\n    const [startingImageIndexOnPointerDown, setStartingImageIndexOnPointerDown] = useState(0);\n    const [currentMousePosition, setCurrentMousePosition] = useState(0);\n    const [selectedImageIndex, setSelectedImageIndex] = useState(0);\n    const [useAutoplay, setUseAutoplay] = useState(autoplay);\n\n    const imagesCount = imagesBaseUrl.length;\n\n    useEffect(() => {\n        setUseAutoplay(autoplay);\n    }, [autoplay]);\n\n    useEffect(() => {\n        if (typeof imageInitialIndex === \"undefined\") return;\n        if (imageInitialIndex < 0 || imageInitialIndex >= imagesCount) {\n            setSelectedImageIndex(imageInitialIndex);\n            console.log(\n                `ImageInitialIndex of ${imageInitialIndex} was out of bounds of 0 and count: ${imagesCount}`\n            );\n        }\n\n        setSelectedImageIndex(imageInitialIndex);\n    }, [imageInitialIndex, imagesCount]);\n\n    useEffect(() => {\n        if (!useAutoplay) return;\n\n        const timer = setTimeout(() => {\n            incrementImageIndex(1);\n        }, 1000 / autoplaySpeed);\n\n        return () => clearTimeout(timer);\n    },[selectedImageIndex, useAutoplay, autoplaySpeed])\n\n    useEffect(() => {\n        const imageIndexWithOffset = (start, offset) => {\n            let index = moduloWithoutNegative(\n                start + (reverse ? -1 : 1) * Math.floor(offset),\n                imagesCount\n            );\n            setSelectedImageIndex(index);\n        };\n\n        if (!isScrolling) return;\n\n        const scaleFactor = 100;\n        let speedFactor =\n            (1 / mouseDragSpeed) * ((imagesCount * width) / scaleFactor);\n        const changeInX = currentMousePosition - initialMousePosition;\n\n        let difference = changeInX / speedFactor;\n\n        imageIndexWithOffset(startingImageIndexOnPointerDown, difference);\n    }, [\n        currentMousePosition,\n        imagesCount,\n        startingImageIndexOnPointerDown,\n        initialMousePosition,\n        isScrolling,\n        mouseDragSpeed,\n        width,\n        reverse,\n    ]);\n\n    const incrementImageIndex = useCallback((change) => {\n        let index = moduloWithoutNegative(\n            selectedImageIndex + (reverse ? -1 : 1) * Math.floor(change),\n            imagesCount\n        );\n\n        setSelectedImageIndex(index);\n    }, [selectedImageIndex, reverse, imagesCount]);\n\n    const onMouseDown = useCallback((e) => {\n        setInitialMousePosition(e.clientX);\n        setCurrentMousePosition(e.clientX);\n        setStartingImageIndexOnPointerDown(selectedImageIndex);\n        setUseAutoplay(false);\n        setIsScrolling(true);\n\n\n        document.addEventListener(\n            \"mouseup\",\n            () => {\n                onMouseUp();\n            },\n            { once: true }\n        );\n\n        if (shouldNotifyEvents) notifyOnPointerDown?.(e.clientX, e.clientY);\n    }, [selectedImageIndex, shouldNotifyEvents, notifyOnPointerDown]);\n\n    const onMouseUp = useCallback((e) => {\n        setIsScrolling(false);\n\n        if (!shouldNotifyEvents) return;\n\n        if (typeof e !== \"undefined\") notifyOnPointerUp?.(e?.clientX, e.clientY);\n        else {\n            notifyOnPointerUp?.(0, 0);\n        }\n    }, [shouldNotifyEvents, notifyOnPointerUp]);\n\n    const onMouseMove = useCallback((e) => {\n        if (!isScrolling) return;\n\n        setCurrentMousePosition(e.clientX);\n\n        if (shouldNotifyEvents) notifyOnPointerMoved?.(e.clientX, e.clientY);\n    }, [isScrolling, shouldNotifyEvents, notifyOnPointerMoved]);\n\n    return (\n    <StyledDiv \n            ref={elementRef}\n            isGrabbing={isScrolling}\n            onPointerDown={onMouseDown}\n            onPointerMove={onMouseMove}\n            onMouseLeave={()=> {\n                autoplay && setUseAutoplay(true);\n            }}\n    >\n        {imagesBaseUrl?.map((value, index) => (\n            <AnimationImage\n                src={value}\n                width={width}\n                height={height}\n                isVisible={index === selectedImageIndex}\n                key={index}\n            />\n        ))}\n    </StyledDiv>\n    );\n};\n\nexport { SpinImages360 }","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledImageWrapper = styled.div`\n    position: relative;\n    display: inline-block;\n    user-select: none;\n    touch-action: none;\n    cursor: ${({ zoomActive }) => (zoomActive && \"none\")};\n`;\n\nconst StyledImage = styled.img.attrs((props) => ({\n    style: {\n        userSelect: \"none\",\n        touchAction: \"none\",\n        WebkitUserDrag: \"none\",\n    },\n}))``;\n\nconst ZoomedArea = styled.div`\n    position: absolute;\n    top: ${({ y }) => y}px;\n    left: ${({ x }) => x}px;\n    width: 200px;\n    height: 200px;\n    border-radius: 50%;\n    overflow: hidden;\n    z-index: 1;\n`;\n\nconst ZoomedImage = styled.img`\n    position: absolute;\n    top: ${({ offsetY }) => -offsetY}px;\n    left: ${({ offsetX }) => -offsetX}px;\n    width: ${({ width }) => width}px;\n    height: ${({ height }) => height}px;\n`;\n\nconst AnimationImage = ({ src, isVisible, width, height }) => {\n    const [zoomActive, setZoomActive] = useState(false);\n    const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n\n    const getCursorPosition = (e) => {\n        const img = e.currentTarget;\n        const imgRect = img.getBoundingClientRect();\n        const x = e.pageX - window.pageXOffset - imgRect.left;\n        const y = e.pageY - window.pageYOffset - imgRect.top;\n        return { x, y };\n    };\n\n    const handleMouseMove = (e) => {\n        if (zoomActive) {\n        const { x, y } = getCursorPosition(e);\n        setMousePosition({ x, y });\n        }\n    };\n\n    const handleImageClick = () => {\n        if (isVisible) {\n        setZoomActive(!zoomActive);\n        }\n    };\n\n    const handleMouseLeave = () => {\n        setZoomActive(false); \n    };\n\n\n    return (\n        <StyledImageWrapper\n        onMouseMove={handleMouseMove}\n        onClick={handleImageClick}\n        zoomActive={zoomActive}\n        onMouseLeave={handleMouseLeave}\n        style={{ display: isVisible ? \"block\" : \"none\" }}\n        >\n        <StyledImage\n            src={src}\n            alt=\"Rotating object\"\n            width={width}\n            height={height}\n        />\n        {zoomActive && (\n            <ZoomedArea x={mousePosition.x - 100} y={mousePosition.y - 100}>\n            <ZoomedImage\n                src={src}\n                alt=\"Zoomed object\"\n                width={width * 2}\n                height={height * 2}\n                offsetX={(mousePosition.x / width) * (width * 2) - 100}\n                offsetY={(mousePosition.y / height) * (height * 2) - 100}\n            />\n            </ZoomedArea>\n        )}\n        </StyledImageWrapper>\n    );\n};\n\nexport { AnimationImage };\n","import styled, {css} from \"styled-components\";\nimport {CustomIconSvg} from \"./Icon\";\n\nconst iconUrlEncoded = encodeURIComponent(CustomIconSvg);\n\nexport const StyledDiv = styled.div`\n    position: relative;\n    border: none;\n    padding: 5px;\n    display: inline-block;\n    user-select: none;\n    touch-action: none;\n    ${(props) =>\n    props.isGrabbing\n        ? css`\n                cursor: url(\"data:image/svg+xml,${iconUrlEncoded}\") 16 16, pointer;\n            `\n        : css`\n                cursor: url(\"data:image/svg+xml,${iconUrlEncoded}\") 16 16, pointer;\n            `};\n    `;\n","export const CustomIconSvg = `\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 46.693 25\" xml:space=\"preserve\" width=\"37.354\" height=\"20\">\n        <path d=\"M5.082 11.901c-8.448 4.636 14.306 7.452 19.432 7.407v-2.827l4.258 4.257-4.258 4.264v-2.648c-10.302.389-34.549-6.241-19.965-11.743q.208.646.494 1.216zm36.095-8.743q0-1.488.535-2.083c.535-.593.901-.592 1.634-.592q.528.002.866.13.337.13.551.337t.337.438a2 2 0 0 1 .197.535q.146.582.144 1.22 0 1.423-.483 2.078-.478.656-1.656.658-.656-.002-1.064-.21a1.75 1.75 0 0 1-.665-.615 2.3 2.3 0 0 1-.292-.786 5.3 5.3 0 0 1-.107-1.109m-31.117.829-3.42-.607Q7.062 1.748 8.274.878 9.484 0 11.703 0q2.545 0 3.683.949 1.133.953 1.133 2.391-.004.844-.459 1.523-.459.685-1.388 1.197.755.187 1.152.438.648.401 1.006 1.053t.362 1.558q0 1.138-.592 2.185-.598 1.043-1.714 1.607c-1.117.564-1.726.563-2.94.563q-1.774 0-2.798-.418a4.2 4.2 0 0 1-1.687-1.223q-.662-.806-1.013-2.025l3.623-.483q.212 1.095.662 1.523.446.424 1.14.424.726 0 1.208-.531c.483-.531.483-.829.483-1.423q0-.907-.465-1.401c-.465-.496-.729-.498-1.261-.498q-.423-.002-1.168.212l.187-2.588q.298.045.465.045.703 0 1.171-.452c.467-.452.473-.653.473-1.068q0-.599-.354-.948-.356-.354-.969-.354a1.4 1.4 0 0 0-1.033.385q-.403.378-.543 1.341m18.499-.844-3.603.44q-.142-.749-.473-1.057-.337-.308-.821-.308-.878-.004-1.364.885-.356.642-.525 2.733.65-.659 1.329-.973.685-.315 1.582-.315 1.743 0 2.946 1.241 1.203 1.249 1.204 3.158 0 1.288-.607 2.356-.609 1.068-1.687 1.615-1.08.547-2.71.547-1.955.002-3.134-.669-1.179-.668-1.889-2.123c-.71-1.455-.706-2.261-.706-3.868q0-3.523 1.487-5.163Q21.06 0 23.697 0q1.554-.002 2.455.358c.901.36 1.101.592 1.496 1.048q.599.694.908 1.735m-6.662 5.806q0 1.06.531 1.656.535.599 1.308.599a1.53 1.53 0 0 0 1.194-.543q.478-.543.478-1.618 0-1.101-.498-1.679a1.58 1.58 0 0 0-1.239-.578q-.753 0-1.268.563-.504.558-.504 1.599m7.71-2.273q0-3.71 1.337-5.194T35.012 0q1.315.002 2.158.323.844.327 1.376.844.537.519.838 1.092.306.576.494 1.337.364 1.453.364 3.041.002 3.543-1.203 5.183-1.194 1.64-4.13 1.642-1.642 0-2.656-.525a4.3 4.3 0 0 1-1.662-1.539q-.469-.718-.733-1.965a14 14 0 0 1-.259-2.755m3.583.008q-.004 2.484.44 3.397.44.908 1.277.908a1.36 1.36 0 0 0 .953-.385q.407-.389.592-1.223.193-.837.191-2.603c0-1.729-.144-2.888-.44-3.488q-.44-.891-1.319-.893-.897.002-1.3.908-.393.917-.395 3.378m9.424-3.522q-.002.996.175 1.362t.512.364a.53.53 0 0 0 .385-.156q.159-.153.239-.49.076-.337.076-1.041.002-1.039-.175-1.399c-.177-.36-.292-.358-.528-.358q-.36 0-.519.364-.165.366-.163 1.353m-1.08 8.325c4.012 2.041 3.054 4.936-4.051 6.694a41 41 0 0 1-6.786 1.136v2.298c2.778-.194 5.362-.833 7.623-1.379 10.685-2.588 10.312-7.208 3.557-9.815a10 10 0 0 1-.343 1.064\" style=\"fill-rule:evenodd;clip-rule:evenodd\"/>\n    </svg>\n`;"],"mappings":"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","names":["React","useRef","useState","useCallback","useEffect","styled","VideoContainer","width","height","Video","Controls","showControls","PlayPauseButton","ProgressBar","showProgressBar","progressBarColor","VolumeControl","showVolumeControl","volumeControlColor","RetryButton","LoadingErrorOverlay","loaded","srcFallback","LoadingOverlay","RenderVideo","src","autoplay","loop","muted","showRetryButton","showPlayPauseButton","showLoadingOverlay","RetryButtonComponent","LoadingOverlayComponent","LoadingErrorOverlayComponent","TextLoadingOverlayComponent","PlayPauseButtonComponent","videoRef","isPlaying","setIsPlaying","currentTime","setCurrentTime","duration","setDuration","volume","setVolume","setLoaded","error","setError","togglePlayPause","_a","_b","handleLoadedData","handleError","event","handleTimeUpdate","handleProgressChange","e","newTime","handleVolumeChange","newVolume","handleRetry","React","useCallback","useEffect","useRef","useState","React","useState","styled","StyledImageWrapper","zoomActive","StyledImage","props","ZoomedArea","y","x","ZoomedImage","offsetY","offsetX","width","height","AnimationImage","src","isVisible","setZoomActive","mousePosition","setMousePosition","getCursorPosition","e","imgRect","styled","css","CustomIconSvg","iconUrlEncoded","CustomIconSvg","StyledDiv","styled","props","css","moduloWithoutNegative","value","n","SpinImages360","imagesBaseUrl","mouseDragSpeed","reverse","autoplaySpeed","autoplay","width","height","imageInitialIndex","shouldNotifyEvents","notifyOnPointerDown","notifyOnPointerUp","notifyOnPointerMoved","elementRef","useRef","isScrolling","setIsScrolling","useState","initialMousePosition","setInitialMousePosition","startingImageIndexOnPointerDown","setStartingImageIndexOnPointerDown","currentMousePosition","setCurrentMousePosition","selectedImageIndex","setSelectedImageIndex","useAutoplay","setUseAutoplay","imagesCount","useEffect","timer","incrementImageIndex","imageIndexWithOffset","start","offset","index","speedFactor","difference","useCallback","change","onMouseDown","e","onMouseUp","onMouseMove","React","StyledDiv","AnimationImage"]}